const { lite } = require('../lite');
const config = require('../settings');
const commands = require('./commands'); // Importe toutes les commandes
const moment = require('moment');
const fs = require('fs');

moment.locale('fr');

// Cat√©gories avec emojis et descriptions
const CATEGORIES = {
    'main': { emoji: 'üè†', title: 'Commandes Principales' },
    'group': { emoji: 'üë•', title: 'Gestion de Groupe' },
    'download': { emoji: 'üì•', title: 'T√©l√©chargements' },
    'fun': { emoji: 'üéÆ', title: 'Divertissement' },
    'owner': { emoji: 'üëë', title: 'Administration' },
    'ai': { emoji: 'üß†', title: 'Intelligence Artificielle' },
    'bug': { emoji: 'üêû', title: 'Contr√¥les & Bugs' },
    'tools': { emoji: 'üõ†Ô∏è', title: 'Outils Utilitaires' },
    'media': { emoji: 'üéµ', title: 'M√©dias & Stickers' },
    'game': { emoji: 'üé≤', title: 'Jeux' }
};

lite({
    pattern: "menu",
    react: "üìú",
    alias: ["help", "cmd", "command"],
    desc: "Affiche le menu interactif",
    category: "main",
    filename: __filename,
    async handler(conn, mek, m, { reply, pushname, from }) {
        try {
            // Calcul de l'uptime
            const uptime = process.uptime();
            const days = Math.floor(uptime / (3600 * 24));
            const hours = Math.floor((uptime % (3600 * 24)) / 3600);
            const minutes = Math.floor((uptime % 3600) / 60);
            const formattedUptime = `${days}j ${hours}h ${minutes}m`;
            
            // Boutons interactifs
            const buttons = Object.entries(CATEGORIES).map(([category, { emoji, title }]) => {
                return {
                    buttonId: `menucategory ${category}`,
                    buttonText: { displayText: `${emoji} ${title}` },
                    type: 1
                };
            });
            
            buttons.push(
                { buttonId: 'donate', buttonText: { displayText: '‚ù§Ô∏è Faire un Don' }, type: 1 },
                { buttonId: 'support', buttonText: { displayText: 'üë• Support' }, type: 1 }
            );
            
            // En-t√™te du menu
            const menuHeader = `
‚ï≠‚ïê‚ïê‚ïê‚ú¶„Äî ü§ñ *${PATERSON-MD}* „Äï‚ú¶‚ïê‚ïê‚ïê‚ïÆ
‚îÇ üë§ Utilisateur : ${pushname}
‚îÇ ‚ö° Pr√©fixe     : [ ${config.PREFIX} ]
‚îÇ üõ°Ô∏è Mode        : [ ${config.MODE} ]
‚îÇ üîÑ Uptime      : ${formattedUptime}
‚îÇ üöÄ Version     : ${config.version} BETA
‚ï∞‚ïê‚ïê‚ïê‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚ïê‚ïê‚ïê‚ïØ

üìö *S√âLECTIONNEZ UNE CAT√âGORIE:*
`;

            // Envoi du menu avec boutons
            await conn.sendMessage(
                from,
                {
                    image: { url:https://i.ibb.co/qMxK96PS/malvin-xd.jpg},
                    caption: menuHeader,
                    footer: config.FOOTER,
                    buttons: buttons,
                    headerType: 4
                },
                { quoted: mek }
            );

        } catch (e) {
            console.error('Erreur du menu:', e);
            reply(`‚ùå Erreur lors du chargement du menu: ${e.message}`);
        }
    }
});

// Commande pour afficher les commandes par cat√©gorie
lite({
    pattern: "menucategory",
    react: "üìö",
    dontAddCommandList: true,
    desc: "Affiche les commandes d'une cat√©gorie",
    filename: __filename,
    async handler(conn, mek, m, { reply, text, from }) {
        try {
            const category = text.split(' ')[1];
            
            if (!category || !CATEGORIES[category]) {
                return reply("‚ùå Cat√©gorie invalide! Utilisez .menu pour voir les cat√©gories");
            }
            
            const { emoji, title } = CATEGORIES[category];
            const categoryCommands = commands.filter(cmd => 
                cmd.category === category && !cmd.dontAddCommandList
            );
            
            if (categoryCommands.length === 0) {
                return reply(`‚ùå Aucune commande dans la cat√©gorie ${title}`);
            }
            
            let commandList = `‚ï≠‚ïê‚ïê‚ïê‚ú¶„Äî ${emoji} *${title}* „Äï‚ú¶‚ïê‚ïê‚ïê‚ïÆ\n`;
            categoryCommands.forEach((cmd, index) => {
                commandList += `‚îÇ ‚¨° ${config.PREFIX}${cmd.pattern}${cmd.alias ? ` (${cmd.alias.join(', ')})` : ''}\n`;
                if ((index + 1) % 5 === 0 && index !== categoryCommands.length - 1) {
                    commandList += '‚ï∞‚ïê‚ïê‚ïê‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚ïê‚ïê‚ïê‚ïØ\n‚ï≠‚ïê‚ïê‚ïê‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚ïê‚ïê‚ïê‚ïÆ\n';
                }
            });
            
            commandList += `‚ï∞‚ïê‚ïê‚ïê‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚ïê‚ïê‚ïê‚ïØ\n\n` +
                          `_Tapez *${config.PREFIX}menu* pour revenir au menu principal_`;
            
            await reply(commandList);
            
        } catch (e) {
            console.error('Erreur de cat√©gorie:', e);
            reply(`‚ùå Erreur: ${e.message}`);
        }
    }
});

// Commande pour afficher toutes les commandes
lite({
    pattern: "allmenu",
    react: "üìú",
    alias: ["fullmenu", "allcmd"],
    desc: "Affiche toutes les commandes disponibles",
    category: "main",
    filename: __filename,
    async handler(conn, mek, m, { reply, pushname }) {
        try {
            // Calcul de l'uptime
            const uptime = process.uptime();
            const days = Math.floor(uptime / (3600 * 24));
            const hours = Math.floor((uptime % (3600 * 24)) / 3600);
            const minutes = Math.floor((uptime % 3600) / 60);
            const formattedUptime = `${days}j ${hours}h ${minutes}m`;
            
            // G√©n√©rer le contenu du menu par cat√©gorie
            let menuContent = "";
            
            for (const [category, { emoji, title }] of Object.entries(CATEGORIES)) {
                const categoryCommands = commands.filter(cmd => 
                    cmd.category === category && !cmd.dontAddCommandList
                );
                
                if (categoryCommands.length > 0) {
                    menuContent += `\n‚ï≠‚ïê‚ïê‚ïê‚ú¶„Äî ${emoji} *${title}* „Äï‚ú¶‚ïê‚ïê‚ïê‚ïÆ\n`;
                    
                    categoryCommands.forEach(cmd => {
                        menuContent += `‚îÇ ‚¨° ${config.PREFIX}${cmd.pattern}`;
                        if (cmd.alias) menuContent += ` (${cmd.alias.join(', ')})`;
                        menuContent += `\n`;
                    });
                    
                    menuContent += `‚ï∞‚ïê‚ïê‚ïê‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚ïê‚ïê‚ïê‚ïØ`;
                }
            }
            
            // Menu complet
            const fullMenu = `
‚ï≠‚ïê‚ïê‚ïê‚ú¶„Äî ü§ñ *${config.BOT_NAME}* „Äï‚ú¶‚ïê‚ïê‚ïê‚ïÆ
‚îÇ üë§ Utilisateur : ${pushname}
‚îÇ ‚ö° Pr√©fixe     : [ ${config.PREFIX} ]
‚îÇ üõ°Ô∏è Mode        : [ ${config.MODE} ]
‚îÇ üîÑ Uptime      : ${formattedUptime}
‚îÇ üöÄ Version     : ${config.version} BETA
‚ï∞‚ïê‚ïê‚ïê‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚ïê‚ïê‚ïê‚ïØ

üìö *TOUTES LES COMMANDES DISPONIBLES:*
${menuContent}

üîç *COMMANDES SP√âCIALES:*
‚ï≠‚ïê‚ïê‚ïê‚ú¶„Äî üêû BUG GROUP CONTROLS „Äï‚ú¶‚ïê‚ïê‚ïê‚ïÆ
‚îÇ .antipurge [on/off] - Bloquer les purges
‚îÇ .purge - Purger les messages
‚îÇ .lockgroup - Verrouiller le groupe
‚îÇ .unlockgroup - D√©verrouiller
‚îÇ .restrict [all/none] - Restrictions
‚ï∞‚ïê‚ïê‚ïê‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚ïê‚ïê‚ïê‚ïØ

‚ï≠‚ïê‚ïê‚ïê‚ú¶„Äî üé≤ JEUX DISPONIBLES „Äï‚ú¶‚ïê‚ïê‚ïê‚ïÆ
‚îÇ .tictactoe - Jeu du Morpion
‚îÇ .hangman - Jeu du Pendu
‚îÇ .quiz - Quiz interactif
‚îÇ .actionverite - Action ou V√©rit√©
‚ï∞‚ïê‚ïê‚ïê‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚úß‚ú¶‚ïê‚ïê‚ïê‚ïØ

> ${config.DESCRIPTION || "Bot PATERSON-MD cr√©√© par KERVENS AUBOURG"}
¬© ${new Date().getFullYear()} PATERSON-MD | Tous droits r√©serv√©s
${config.FOOTER || ""}`;

            // Envoi du menu complet
            await conn.sendMessage(
                from,
                {
                    image: { url: config.MENU_IMAGE_URL },
                    caption: fullMenu,
                    contextInfo: {
                        mentionedJid: [m.sender],
                        forwardingScore: 999,
                        isForwarded: true
                    }
                },
                { quoted: mek }
            );

        } catch (e) {
            console.error('Erreur du menu complet:', e);
            reply(`‚ùå Erreur lors du chargement du menu complet: ${e.message}`);
        }
    }
});

// Commande pour afficher les informations de support
lite({
    pattern: "support",
    react: "üë•",
    dontAddCommandList: true,
    desc: "Affiche les informations de support",
    filename: __filename,
    async handler(conn, mek, m, { reply }) {
        const supportInfo = `
üë• *SUPPORT & COMMUNAUT√â*

Rejoignez notre canal officiel pour :
- Annonces importantes
- Mises √† jour du bot
- Support technique
- Communaut√© active

üåê *Canal Officiel:*
https://whatsapp.com/channel/0029Vb6KikfLdQefJursHm20

üí¨ *Groupe de Support:*
${config.SUPPORT_GROUP ? `https://chat.whatsapp.com/GIIGfaym8V7DZZElf6C3Qh?mode=ac_t/${PATERSON-MD}` : 'Disponible sur demande'}

üìß *Email:*
${menespierre1@gmail.com || 'support@paterson-md.com'}`;
        
        await reply(supportInfo);
    }
});

// Commande pour afficher les informations de don
lite({
    pattern: "donate",
    react: "‚ù§Ô∏è",
    dontAddCommandList: true,
    desc: "Affiche les informations pour faire un don",
    filename: __filename,
    async handler(conn, mek, m, { reply }) {
        const donationInfo = `
‚ù§Ô∏è *SOUTENIR LE D√âVELOPPEMENT DU BOT*

Merci de vouloir soutenir ${PATERSON-MD}et la communaut√© Ha√Øtienne!

Vos dons nous aident √†:
- Maintenir les serveurs du bot
- D√©velopper de nouvelles fonctionnalit√©s
- Fournir un support rapide
- Soutenir des initiatives locales en Ha√Øti

üí≥ *Dons pour Ha√Øti:*
‚Ä¢ NATCASH: 50935399104
‚Ä¢ MON CASH: 50946343554

üåç *Dons Internationaux:*
‚Ä¢ PayPal: ${menespierre1@gmail.com || 'paypal.me/PatersonMD'}

Votre soutien est grandement appr√©ci√©! üôè
üá≠üáπ Ensemble pour une Ha√Øti meilleur`;
        
        await reply(donationInfo);
    }
});
